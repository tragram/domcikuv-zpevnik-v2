/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GalleryRouteImport } from './routes/gallery'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EditIndexRouteImport } from './routes/edit/index'
import { Route as SongSongIdRouteImport } from './routes/song/$songId'
import { Route as EditSongIdRouteImport } from './routes/edit/$songId'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authProfileRouteImport } from './routes/(auth)/profile'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const GalleryRoute = GalleryRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EditIndexRoute = EditIndexRouteImport.update({
  id: '/edit/',
  path: '/edit/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongSongIdRoute = SongSongIdRouteImport.update({
  id: '/song/$songId',
  path: '/song/$songId',
  getParentRoute: () => rootRouteImport,
} as any)
const EditSongIdRoute = EditSongIdRouteImport.update({
  id: '/edit/$songId',
  path: '/edit/$songId',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)
const authProfileRoute = authProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/admin': typeof AdminRoute
  '/gallery': typeof GalleryRoute
  '/login': typeof authLoginRoute
  '/profile': typeof authProfileRoute
  '/signup': typeof authSignupRoute
  '/edit/$songId': typeof EditSongIdRoute
  '/song/$songId': typeof SongSongIdRoute
  '/edit': typeof EditIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/admin': typeof AdminRoute
  '/gallery': typeof GalleryRoute
  '/login': typeof authLoginRoute
  '/profile': typeof authProfileRoute
  '/signup': typeof authSignupRoute
  '/edit/$songId': typeof EditSongIdRoute
  '/song/$songId': typeof SongSongIdRoute
  '/edit': typeof EditIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/admin': typeof AdminRoute
  '/gallery': typeof GalleryRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/profile': typeof authProfileRoute
  '/(auth)/signup': typeof authSignupRoute
  '/edit/$songId': typeof EditSongIdRoute
  '/song/$songId': typeof SongSongIdRoute
  '/edit/': typeof EditIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/gallery'
    | '/login'
    | '/profile'
    | '/signup'
    | '/edit/$songId'
    | '/song/$songId'
    | '/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/gallery'
    | '/login'
    | '/profile'
    | '/signup'
    | '/edit/$songId'
    | '/song/$songId'
    | '/edit'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/admin'
    | '/gallery'
    | '/(auth)/login'
    | '/(auth)/profile'
    | '/(auth)/signup'
    | '/edit/$songId'
    | '/song/$songId'
    | '/edit/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  AdminRoute: typeof AdminRoute
  GalleryRoute: typeof GalleryRoute
  EditSongIdRoute: typeof EditSongIdRoute
  SongSongIdRoute: typeof SongSongIdRoute
  EditIndexRoute: typeof EditIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/': {
      id: '/edit/'
      path: '/edit'
      fullPath: '/edit'
      preLoaderRoute: typeof EditIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/$songId': {
      id: '/song/$songId'
      path: '/song/$songId'
      fullPath: '/song/$songId'
      preLoaderRoute: typeof SongSongIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/$songId': {
      id: '/edit/$songId'
      path: '/edit/$songId'
      fullPath: '/edit/$songId'
      preLoaderRoute: typeof EditSongIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/profile': {
      id: '/(auth)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof authProfileRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authProfileRoute: typeof authProfileRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authProfileRoute: authProfileRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  AdminRoute: AdminRoute,
  GalleryRoute: GalleryRoute,
  EditSongIdRoute: EditSongIdRoute,
  SongSongIdRoute: SongSongIdRoute,
  EditIndexRoute: EditIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
